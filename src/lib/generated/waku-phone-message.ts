// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.20.3
// source: waku-phone-message.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "waku.phone.v1";

export interface WakuPhoneMessage {
  messageType: WakuPhoneMessage_MessageType;
  /** Unique identifier for this call */
  callId: Buffer;
  callerPeerId?: Buffer | undefined;
  callerDisplayName?: string | undefined;
  calledPeerId?: Buffer | undefined;
  calledDisplayName?: string | undefined;
  webrtcData?: Buffer | undefined;
}

export enum WakuPhoneMessage_MessageType {
  /** DIAL - Calling party to called party */
  DIAL = 0,
  /** RINGING - Called party to calling party */
  RINGING = 1,
  /** ANSWER - Called party to calling party */
  ANSWER = 2,
  /** REJECT - Called party to calling party */
  REJECT = 3,
  /** CANDIDATE - Either party to the other; to support Trickle ICE (RFC 8838) */
  CANDIDATE = 4,
  /** BYE - Either party to the other */
  BYE = 5,
  UNRECOGNIZED = -1,
}

function createBaseWakuPhoneMessage(): WakuPhoneMessage {
  return {
    messageType: 0,
    callId: Buffer.alloc(0),
    callerPeerId: undefined,
    callerDisplayName: undefined,
    calledPeerId: undefined,
    calledDisplayName: undefined,
    webrtcData: undefined,
  };
}

export const WakuPhoneMessage: MessageFns<WakuPhoneMessage> = {
  encode(message: WakuPhoneMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.messageType !== 0) {
      writer.uint32(8).int32(message.messageType);
    }
    if (message.callId.length !== 0) {
      writer.uint32(18).bytes(message.callId);
    }
    if (message.callerPeerId !== undefined) {
      writer.uint32(82).bytes(message.callerPeerId);
    }
    if (message.callerDisplayName !== undefined) {
      writer.uint32(90).string(message.callerDisplayName);
    }
    if (message.calledPeerId !== undefined) {
      writer.uint32(162).bytes(message.calledPeerId);
    }
    if (message.calledDisplayName !== undefined) {
      writer.uint32(170).string(message.calledDisplayName);
    }
    if (message.webrtcData !== undefined) {
      writer.uint32(242).bytes(message.webrtcData);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WakuPhoneMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWakuPhoneMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.messageType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.callId = Buffer.from(reader.bytes());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.callerPeerId = Buffer.from(reader.bytes());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.callerDisplayName = reader.string();
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.calledPeerId = Buffer.from(reader.bytes());
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.calledDisplayName = reader.string();
          continue;
        }
        case 30: {
          if (tag !== 242) {
            break;
          }

          message.webrtcData = Buffer.from(reader.bytes());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<WakuPhoneMessage>, I>>(base?: I): WakuPhoneMessage {
    return WakuPhoneMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WakuPhoneMessage>, I>>(object: I): WakuPhoneMessage {
    const message = createBaseWakuPhoneMessage();
    message.messageType = object.messageType ?? 0;
    message.callId = object.callId ?? Buffer.alloc(0);
    message.callerPeerId = object.callerPeerId ?? undefined;
    message.callerDisplayName = object.callerDisplayName ?? undefined;
    message.calledPeerId = object.calledPeerId ?? undefined;
    message.calledDisplayName = object.calledDisplayName ?? undefined;
    message.webrtcData = object.webrtcData ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
